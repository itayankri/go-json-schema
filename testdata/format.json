[
  {
    "description": "a json schema that",
    "path": "/v1/format/date-time",
    "method": "GET",
    "schema": {
      "format": "date-time"
    },
    "tests": [
      {
        "description": "a valid date-time string",
        "data": "1985-04-12T23:20:50.52Z",
        "valid": true
      },
      {
        "description": "a valid date-time string",
        "data": "1996-12-19T16:39:57-08:00",
        "valid": true
      },
      {
        "description": "an invalid date-time string",
        "data": "06/19/1963 08:30:06 PST",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/time",
    "method": "GET",
    "schema": {
      "format": "time"
    },
    "tests": [
      {
        "description": "a valid time",
        "data": "08:30:06.283185Z",
        "valid": true
      },
      {
        "description": "a valid time",
        "data": "10:05:08+01:00",
        "valid": true
      },
      {
        "description": "an invalid time",
        "data": "09:45:10 PST",
        "valid": false
      },
      {
        "description": "an invalid RFC3339 time",
        "data": "01:02:03,121212",
        "valid": false
      },
      {
        "description": "an invalid time - seconds",
        "data": "45:59:62",
        "valid": false
      },
      {
        "description": "an invalid time",
        "data": "1234",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/date",
    "method": "GET",
    "schema": {
      "format": "date"
    },
    "tests": [
      {
        "description": "a valid date string",
        "data": "1963-06-19",
        "valid": true
      },
      {
        "description": "an invalid date string (/ is invalid)",
        "data": "06/19/1963",
        "valid": false
      },
      {
        "description": "an invalid RFC3339 date",
        "data": "02-2002",
        "valid": false
      },
      {
        "description": "an invalid month 350",
        "data": "2010-350",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/email",
    "method": "GET",
    "schema": {
      "format": "email"
    },
    "tests": [
      {
        "description": "a valid email",
        "data": "john@example.com",
        "valid": true
      },
      {
        "description": "no angle-addr",
        "data": "@",
        "valid": false
      },
      {
        "description": "no angle-addr",
        "data": "john(at)example.com",
        "valid": false
      },
      {
        "description": "missing '@' or angle-addr",
        "data": "1234",
        "valid": false
      },
      {
        "description": "no address",
        "data": "",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/idn-email",
    "method": "GET",
    "schema": {
      "format": "idn-email"
    },
    "tests": [
      {
        "description": "a valid idn email (example@example.test in Hangul)",
        "data": "실례@실례.테스트",
        "valid": true
      },
      {
        "description": "a valid idn email",
        "data": "john@example.com",
        "valid": true
      },
      {
        "description": "an invalid idn email",
        "data": "1234",
        "valid": false
      },
      {
        "description": "an invalid idn email",
        "data": "",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/hostname",
    "method": "GET",
    "schema": {
      "format": "hostname"
    },
    "tests": [
      {
        "description": "a valid host name",
        "data": "www.example.com",
        "valid": true
      },
      {
        "description": "a valid host name",
        "data": "xn--4gbwdl.xn--wgbh1c",
        "valid": true
      },
      {
        "description": "a host name containing illegal characters (_)",
        "data": "not_a_valid_host_name",
        "valid": false
      },
      {
        "description": "-a-host-name-that-starts-with --is not valid hostname",
        "data": "-a-host-name-that-starts-with--",
        "valid": false
      },
      {
        "description": "hostname is too long (more then 255 characters)",
        "data": "a-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-long-host-name-component",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/idn-hostname",
    "method": "GET",
    "schema": {
      "format": "idn-hostname"
    },
    "tests": [
      {
        "description": "a valid host name (example.test in Hangul)",
        "data": "실례.테스트",
        "valid": true
      },
      {
        "description": "contains illegal character U+302E '〮'",
        "data": "〮실례.테스트",
        "valid": false
      },
      {
        "description": "contains illegal character U+302E '〮' ",
        "data": "실〮례.테스트",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/ipv4",
    "method": "GET",
    "schema": {
      "format": "ipv4"
    },
    "tests": [
      {
        "description": "a valid IPv4 address",
        "data": "192.168.0.1",
        "valid": true
      },
      {
        "description": "too many components",
        "data": "127.0.0.0.1",
        "valid": false
      },
      {
        "description": "IPv4 out of range",
        "data": "256.256.256.256",
        "valid": false
      },
      {
        "description": "not enough components (4 needed)",
        "data": "127",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/ipv6",
    "method": "GET",
    "schema": {
      "format": "ipv6"
    },
    "tests": [
      {
        "description": "a valid IPv6 address",
        "data": "::1",
        "valid": true
      },
      {
        "description": "invalid ipv6 address 12345::, IPv6 out of range",
        "data": "12345::",
        "valid": false
      },
      {
        "description": "invalid ipv6 address 1:1:1:1:1, too many components",
        "data": "1:1:1:1:1",
        "valid": false
      },
      {
        "description": "invalid ipv6 address ::string, IPv6 containing illegal characters",
        "data": "::string",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/uri",
    "method": "GET",
    "schema": {
      "format": "uri"
    },
    "tests": [
      {
        "description": "a valid URL",
        "data": "http://foo.bar/?baz=qux#quux",
        "valid": true
      },
      {
        "description": "a valid URL with URL-encoded",
        "data": "http://foo.bar/?q=Test%20URL-encoded%20stuff",
        "valid": true
      },
      {
        "description": "a valid URL with  special characters",
        "data": "http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com",
        "valid": true
      },
      {
        "description": "a valid URL for a simple text file",
        "data": "http: //www.fff.com/rfc/rfc2396.txt",
        "valid": true
      },
      {
        "description": "an invalid URI with spaces",
        "data": "http:// shouldfail.com",
        "valid": false
      },
      {
        "description": "parse :// houldfail: missing protocol scheme",
        "data": ":// houldfail",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/uri-reference",
    "method": "GET",
    "schema": {
      "format": "uri-reference"
    },
    "tests": [
      {
        "description": "a valid uri reference",
        "data": "aaa/bbb.html",
        "valid": true
      },
      {
        "description": "a valid uri reference",
        "data": "?a=b",
        "valid": true
      },
      {
        "description": "a valid uri reference",
        "data": "#fragment",
        "valid": true
      },
      {
        "description": "a valid uri reference",
        "data": "http://example.com",
        "valid": true
      },
      {
        "description": "invalid uri-ref #frag\\ment",
        "data": "#frag\\ment",
        "valid": false
      },
      {
        "description": "invalid uri-ref \\\\WINDOWS\\fileshare",
        "data": "\\\\WINDOWS\\fileshare",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/iri",
    "method": "GET",
    "schema": {
      "format": "iri"
    },
    "tests": [
      {
        "description": "a valid IRI with anchor tag",
        "data": "http://ƒøø.ßår/?∂éœ=πîx#πîüx",
        "valid": true
      },
      {
        "description": "a valid IRI with anchor tag and parantheses",
        "data": "http://ƒøø.com/blah_(wîkïpédiå)_blah#ßité-1",
        "valid": true
      },
      {
        "description": "an invalid IRI",
        "data": "http:// ƒøø.com",
        "valid": false
      },
      {
        "description": "uri missing scheme prefix",
        "data": "/abc",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/iri-reference",
    "method": "GET",
    "schema": {
      "format": "iri-reference"
    },
    "tests": [
      {
        "description": "a valid IRI",
        "data": "http://ƒøø.ßår/?∂éœ=πîx#πîüx",
        "valid": true
      },
      {
        "description": "a valid IRI fragment",
        "data": "#ƒrägmênt",
        "valid": true
      },
      {
        "description": "a valid IRI",
        "data": "http://ƒøø.com/blah_(wîkïpédiå)_blah#ßité-1",
        "valid": true
      },
      {
        "description": "invalid uri-ref \\\\WINDOWS\\filëßåré ",
        "data": "\\\\WINDOWS\\filëßåré",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/uri-template",
    "method": "GET",
    "schema": {
      "format": "uri-template"
    },
    "tests": [
      {
        "description": "a valid URI template",
        "data": "http://example.com/dictionary/{term:1}/{term}",
        "valid": true
      },
      {
        "description": "a valid relative URI template",
        "data": "dictionary/{term:1}/{term}",
        "valid": true
      },
      {
        "description": "invalid uri template http://example.com/dictionary/{term:1}/{term",
        "data": "http://example.com/dictionary/{term:1}/{term",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/json-pointer",
    "method": "GET",
    "schema": {
      "format": "json-pointer"
    },
    "tests": [
      {
        "description": "a valid JSON-pointer",
        "data": "/foo/bar~0/baz~1/%a",
        "valid": true
      },
      {
        "description": "valid JSON-pointer",
        "data": "",
        "valid": true
      },
      {
        "description": "valid JSON-pointer",
        "data": "/foo/0",
        "valid": true
      },
      {
        "description": "valid JSON-pointer",
        "data": "/",
        "valid": true
      },
      {
        "description": "valid JSON-pointer",
        "data": "/a~1b",
        "valid": true
      },
      {
        "description": "valid JSON-pointer",
        "data": "/ ",
        "valid": true
      },
      {
        "description": "ending tilda error",
        "data": "/foo/bar~",
        "valid": false
      },
      {
        "description": "non-empty references must begin with a '/' character: #/ ",
        "data": "#/",
        "valid": false
      },
      {
        "description": "non-empty references must begin with a '/' character: #a ",
        "data": "#a",
        "valid": false
      },
      {
        "description": "non-empty references must begin with a '/' character: 0 ",
        "data": "0",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/relative-json-pointer",
    "method": "GET",
    "schema": {
      "format": "relative-json-pointer"
    },
    "tests": [
      {
        "description": "a valid relative json pointer",
        "data": "0/a/b",
        "valid": true
      },
      {
        "description": "a valid relative json pointer",
        "data": "5/a/b#",
        "valid": true
      },
      {
        "description": "a valid relative json pointer",
        "data": "2#",
        "valid": true
      },
      {
        "description": "a valid relative json pointer",
        "data": "2",
        "valid": true
      },
      {
        "description": "strconv.Atoi: parsing \"\": invalid syntax",
        "data": "/a/b",
        "valid": false
      }
    ]
  },
  {
    "description": "a json schema that",
    "path": "/v1/format/regex",
    "method": "GET",
    "schema": {
      "format": "regex"
    },
    "tests": [
      {
        "description": "a valid regex",
        "data": "^[a-z]+$",
        "valid": true
      },
      {
        "description": "error parsing regexp: missing closing ): `(a`",
        "data": "(a",
        "valid": false
      }
    ]
  }
]